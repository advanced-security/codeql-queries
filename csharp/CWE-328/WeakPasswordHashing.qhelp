<!DOCTYPE qhelp PUBLIC
        "-//Semmle//qhelp//EN"
        "qhelp.dtd">
<qhelp>
    <overview>
        <p>
            Using a insufficiently computationally hard hash function can leave data
            vulnerable, and should not be used for password hashing.
        </p>

        <p>
            A strong cryptographic hash function should be resistant to:
        </p>
        <ul>
            <li>
                <strong>Pre-image attacks</strong>. If you know a hash value <code>h(x)</code>,
                you should not be able to easily find the input <code>x</code>.
            </li>
            <li>
                <strong>Collision attacks</strong>. If you know a hash value <code>h(x)</code>,
                you should not be able to easily find a different input
                <code>y</code>
                with the same hash value <code>h(x) = h(y)</code>.
            </li>
            <li>
                <strong>Brute force</strong>. If you know a hash value <code>h(x)</code>,
                you should not be able to find an input <code>y</code> that computes to that hash value
                using brute force attacks without significant computational effort.
            <li>
        </ul>

        <p>
            All of MD5, SHA-1, SHA-2 and SHA-3 are weak against offline brute forcing, since they are not computationally hard.
        </p>

        <p>
            Password hashing algorithms are designed to be slow and/or memory intenstive to compute, which makes brute force attacks more difficult.
        </p>

    </overview>
    <recommendation>

        <p>
            Ensure that for password storage you should use a computationally hard cryptographic hash function, such as:
        </p>

        <ul>
            <li>
                Argon2
            </li>
            <li>
                scrypt
            </li>
                bcrypt
            <li>
                PBKDF2
            </li>
        </ul>

    </recommendation>
    <example>

        <p>
            The following examples show a function that hashes a password using a cryptographic hashing algorithm.

            In the first case the SHA-512 hashing algorithm is used. It is vulnerable to offline brute force attacks:
        </p>
        <sample src="WeakPasswordHashingBad.csharp"/>
        <p>

            Here is the same function using Argon2, which is suitable for password hashing:
        </p>
        <sample src="WeakPasswordHashingGood.csharp"/>

    </example>
    <references>
        <li>
            OWASP:
            <a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html">Password Storage
                Cheat Sheet
            </a>
        </li>
        <li>
            nuget: <a href="https://www.nuget.org/packages/Konscious.Security.Cryptography.Argon2/">Konscious.Security.Cryptography.Argon2</a>
        </li>
        <li>
            nuget: <a href="https://www.nuget.org/packages/Isopoh.Cryptography.Argon2">Isopoh.Cryptography.Argon</a>
        </li>
        <li>
            libsodium: <a href="https://doc.libsodium.org/bindings_for_other_languages#bindings-programming-languages">libsodium bindings for other languages</a>
        </li>
        <li>
            nuget: <a href="https://www.nuget.org/packages/BCrypt.Net-Core/">BCrypt.Net-Core</a>
        </li>
        <li>
            nuget: <a href="https://www.nuget.org/packages/CryptSharpOfficial/">Scrypt and PBKDF2</a>
        </li>
    </references>

</qhelp>
